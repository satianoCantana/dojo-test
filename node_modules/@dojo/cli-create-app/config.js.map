{"version":3,"file":"config.js","sourceRoot":"","sources":["config.ts"],"names":[],"mappings":";;AAAA,+BAAgE;AAChE,6BAA6B;AAE7B,2BAAkC,OAAe,EAAE,UAAU,GAAG,KAAK,EAAE,KAAK,GAAG,KAAK;IACnF,MAAM,iBAAiB,GAAG,WAAI,CAAC,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IACnH,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,WAAI,CAAC,iBAAiB,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;QACnF,MAAM,CAAC,WAAI,CAAC,OAAO,EAAE,eAAQ,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,WAAW,CAAC;AACpB,CAAC;AAPD,8CAOC;AAED,mCAA0C,QAAgB;IACzD,MAAM,IAAI,GAAG,YAAK,CAAC,QAAQ,CAAC,CAAC;IAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAC/C,MAAM,CAAC,gBAAS,CAAC,aAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AAChC,CAAC;AAJD,8DAIC;AAED,8BAAqC,UAAU,GAAG,KAAK,EAAE,KAAK,GAAG,KAAK;IACrE,MAAM,iBAAiB,GAAG,WAAI,CAAC,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IACnH,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,WAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IAExF,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACzB,MAAM,CAAC;YACN,GAAG,EAAE,gBAAS,CAAC,IAAI,CAAC;YACpB,IAAI,EAAE,yBAAyB,CAAC,eAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;SAClE,CAAC;IACH,CAAC,CAAC,CAAC;AACJ,CAAC;AAVD,oDAUC","sourcesContent":["import { format, join, normalize, parse, relative } from 'path';\nimport * as glob from 'glob';\n\nexport function getDirectoryNames(appName: string, isSkeleton = false, isTsx = false): string[] {\n\tconst templateDirectory = join(__dirname, 'templates', isTsx ? 'tsx' : 'ts', isSkeleton ? 'skeleton' : 'standard');\n\tconst directories = glob.sync(join(templateDirectory, '**', '/')).map((directory) => {\n\t\treturn join(appName, relative(templateDirectory, directory));\n\t});\n\n\treturn directories;\n}\n\nexport function stripTemplateFromFileName(filePath: string) {\n\tconst path = parse(filePath);\n\tpath.base = path.base.replace('template-', '');\n\treturn normalize(format(path));\n}\n\nexport function getRenderFilesConfig(isSkeleton = false, isTsx = false): { src: string; dest: string }[] {\n\tconst templateDirectory = join(__dirname, 'templates', isTsx ? 'tsx' : 'ts', isSkeleton ? 'skeleton' : 'standard');\n\tconst files = glob.sync(join(templateDirectory, '**'), { nodir: true, absolute: true });\n\n\treturn files.map((file) => {\n\t\treturn {\n\t\t\tsrc: normalize(file),\n\t\t\tdest: stripTemplateFromFileName(relative(templateDirectory, file))\n\t\t};\n\t});\n}\n"]}