{"version":3,"file":"run.js","sourceRoot":"","sources":["run.ts"],"names":[],"mappings":";;;AACA,2CAAoC;AACpC,6CAAsC;AACtC,2CAAoC;AACpC,qCAAmE;AACnE,iCAA0B;AAC1B,uCAAsC;AAQtC,mBAA8B,MAAc,EAAE,IAAmB;;QAChE,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC;QACjC,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;QAEvB,MAAM,OAAO,GAAG;YACf,GAAG,EAAE,4CAA4C;YACjD,KAAK,EAAE,wBAAwB;YAC/B,QAAQ,EAAE,uBAAuB;YACjC,IAAI,EAAE,WAAW;YACjB,QAAQ,EAAE,2DAA2D;YACrE,cAAc,EAAE,uEAAuE;YACvF,OAAO,EAAE,0FAA0F;SACnG,CAAC;QAEF,OAAO,CAAC,IAAI,CAAC,eAAK,CAAC,SAAS,CAAC,0BAA0B,OAAO,IAAI,CAAC,CAAC,CAAC;QAErE,EAAE,CAAC,CAAC,qBAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;QAClE,CAAC;QAED,OAAO,CAAC,IAAI,CAAC,eAAK,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC,CAAC;QACtD,mBAAS,CAAC,GAAG,0BAAiB,CAAC,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;QAE5D,mBAAS,CAAC,OAAO,CAAC,CAAC;QAEnB,OAAO,CAAC,IAAI,CAAC,eAAK,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,6BAAoB,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAE1F,OAAO,CAAC,IAAI,CAAC,eAAK,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,CAAC;QACvD,MAAM,oBAAU,EAAE,CAAC;QAEnB,OAAO,CAAC,IAAI,CAAC,eAAK,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;QACrD,MAAM,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAErC,OAAO,CAAC,IAAI,CAAC,eAAK,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IACjD,CAAC;CAAA;AApCD,4BAoCC","sourcesContent":["import { Helper } from '@dojo/cli/interfaces';\nimport createDir from './createDir';\nimport npmInstall from './npmInstall';\nimport changeDir from './changeDir';\nimport { getDirectoryNames, getRenderFilesConfig } from './config';\nimport chalk from 'chalk';\nimport { existsSync } from 'fs-extra';\n\nexport interface CreateAppArgs {\n\tname: string;\n\tskeleton: boolean;\n\ttsx: boolean;\n}\n\nexport default async function(helper: Helper, args: CreateAppArgs) {\n\tconst appName = args.name;\n\tconst isSkeleton = args.skeleton;\n\tconst isTsx = args.tsx;\n\n\tconst scripts = {\n\t\tdev: 'dojo build --mode dev --watch file --serve',\n\t\tbuild: 'dojo build --mode dist',\n\t\tbuildDev: `dojo build --mode dev`,\n\t\ttest: 'dojo test',\n\t\ttestUnit: 'dojo build --mode unit && dojo test --unit --config local',\n\t\ttestFunctional: 'dojo build --mode functional && dojo test --functional --config local',\n\t\ttestAll: 'dojo build --mode unit && dojo build --mode functional && dojo test --all --config local'\n\t};\n\n\tconsole.info(chalk.underline(`Creating your new app: ${appName}\\n`));\n\n\tif (existsSync(appName)) {\n\t\treturn Promise.reject(new Error('App directory already exists'));\n\t}\n\n\tconsole.info(chalk.underline('Creating Directories'));\n\tcreateDir(...getDirectoryNames(appName, isSkeleton, isTsx));\n\n\tchangeDir(appName);\n\n\tconsole.info(chalk.underline('\\nCreating Files'));\n\thelper.command.renderFiles(getRenderFilesConfig(isSkeleton, isTsx), { appName, scripts });\n\n\tconsole.info(chalk.underline('\\nRunning npm install'));\n\tawait npmInstall();\n\n\tconsole.info(chalk.underline('\\nRunning dojo init'));\n\tawait helper.command.run('init', '');\n\n\tconsole.info(chalk.green.bold('\\nAll done!\\n'));\n}\n"]}